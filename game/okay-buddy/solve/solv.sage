from base64 import b64decode

# extracted from the game client javascript
DATA = b64decode('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')
F = GF(2)
n_dialogues = 30 # number of dialogues
n = 8 * n_dialogues
m = 4 # number of choices per dialogue
V = VectorSpace(F, n)

start_state = V([0] * n)
end_state = V([1] * n)

choices = []
for i in range(n_dialogues):
    C = DATA[i*m*n_dialogues:i*m*n_dialogues+m*n_dialogues]
    cs = [C[j:j+n_dialogues] for j in range(0, len(C), n_dialogues)]
    c = cs[0]
    vs = [V(list(map(int, bin(int.from_bytes(c))[2:].zfill(n)))) for c in cs]
    choices.append(vs)

print(Matrix(flatten(choices)).T.augment(end_state).right_nullity())
sol = Matrix(flatten(choices)).T.solve_right(end_state)
choices = []
for i in range(n_dialogues):
    c = list(sol[i*4:i*4+4])
    assert c.count(1) == 1
    choices.append(c.index(1)+1)
print(choices)
